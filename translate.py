# -*- coding: utf-8 -*-
"""translate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhVeCEC3BlZ7ljcNyqKG6nRxrMLeCETF
"""

!pip install googletrans==4.0.0-rc1
!pip install langdetect

from googletrans import Translator
from langdetect import DetectorFactory, detect
from matplotlib import pyplot as plt

DATA_DIRECT = '/content/sentiment_analysis_train.v1.0.txt'
VN_DATA_DIRECT = '/content/data_vn.txt'
TEST_DATA_DIRECT = '/content/sentiment_analysis_test_unlabel.v1.0.txt'
TEST_VN_DATA_DIRECT = '/content/test_vn.txt'

def static(data_directory):
    static_language = {}
    static_data = {}
    with open(f"{data_directory}", encoding="utf8") as f:
        data_set = f.read().splitlines()
        static_language.update({"other": 0})
        for data in data_set:
            text = data
            tmp = text.split(" ", 1)
            DetectorFactory.seed = 0
            language = detect(tmp[1])
            if language == "vi" or language == "en" or language == "zh-cn":
                if language not in static_language:
                    static_language.update({language: 1})
                else:
                    static_language.update({language: static_language[language] + 1})
            else:
                static_language.update({"other": static_language["other"] + 1})
            tmp[0] = tmp[0][9:]
            if tmp[0] not in static_data:
                static_data.update({tmp[0]: 1})
            else:
                static_data.update({tmp[0]: static_data[tmp[0]] + 1})
        plt.bar(static_language.keys(), static_language.values())
        plt.show()
        plt.bar(static_data.keys(), static_data.values())
        plt.show()


def trans(document):
    language = translator.detect(document).lang
    if language != 'vi':
        document = translator.translate(document, src=language, dest='vi').text
    return document


def detect_train(
        data_directory,
        vn_directory
):
    with open(f"{data_directory}", encoding="utf8") as f:
        data_set = f.read().splitlines()
        for data in data_set:
            text = data
            tmp = text.split(" ", 1)
            tmp1 = tmp[1].rstrip(".!,? :)(@#$%^&*+-/0123456789ｺﾝﾊﾟｸﾄ<>;").rsplit(".", 1)
            if len(tmp1) == 1:
                text = tmp[0] + " " + trans(tmp1[0])
            else:
                text = tmp[0] + " " + trans(tmp1[0]) + "." + trans(tmp1[1])
            ff = open(f"{vn_directory}", "a", encoding="utf8")
            ff.write(text + '\n')
            ff.close()


def detect_test(data_directory,
                vn_directory
                ):
    with open(f"{data_directory}", encoding="utf8") as f:
        data_set = f.read().splitlines()
        for data in data_set:
            text = data
            tmp = text
            tmp1 = tmp.rstrip(".!,? :)(@#$%^&*+-/0123456789ｺﾝﾊﾟｸﾄ<>;").rsplit(".", 1)
            if len(tmp1) == 1:
                text = trans(tmp1[0])
            else:
                text = trans(tmp1[0]) + "." + trans(tmp1[1])
            ff = open(f"{vn_directory}", "a", encoding="utf8")
            ff.write(text + '\n')
            ff.close()

translator = Translator()
translator.raise_exception = True  # Set raise_exception to True

static(DATA_DIRECT)

detect_train(DATA_DIRECT, VN_DATA_DIRECT)
detect_test(TEST_DATA_DIRECT, TEST_VN_DATA_DIRECT)